name: Docker Build, Test, and Conditional Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Select Platform for deployment (optional)'
        type: choice
        required: true
        default: 'none'
        options:
          - 'none'
          - 'railway'
          - 'render'

env:
  DOCKER_IMAGE_REPO: ${{ secrets.DOCKER_IMAGE_NAME }}
  JAVA_VERSION: '21'
  APP_PORT: 8080

jobs:
  build-test-and-push-docker:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Spring Boot JAR with Maven (Skipping Unit Tests)
        run: mvn -B package -DskipTests --file pom.xml

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

# --- START NEW DEBUGGING STEP ---
      - name: Print DOCKER_IMAGE_REPO value
        run: echo "The DOCKER_IMAGE_REPO is ${{ secrets.DOCKER_IMAGE_NAME }}"
# Expected output in logs: "The DOCKER_IMAGE_REPO is: ***"
# GitHub automatically masks secrets.
# --- END NEW DEBUGGING STEP ---

      - name: Build Docker Image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          load: true
          push: false
          tags: ashishv01/facedec:test-build
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Docker network
        run: docker network create app-network || true

      - name: MySQL on Docker
        run: |
          docker run -d --name test-mysql --network app-network \
          -e MYSQL_DATABASE=attendance_db \
          -e MYSQL_USER=user \
          -e MYSQL_PASSWORD=password \
          -e MYSQL_ROOT_PASSWORD=rootpassword \
          -p 3306:3306 \
          mysql:8.0
          
         
          echo "Waiting for MySQL to be ready..."
          MYSQL_READY=false
          for i in $(seq 1 60); do
            # Try pinging from inside the MySQL container itself first
            docker exec test-mysql mysqladmin ping -h localhost --silent 2>/dev/null
            if [ $? -eq 0 ]; then
              echo "MySQL is ready inside its container. Now check external reachability."
              MYSQL_READY=true
              break
            fi
            echo "MySQL not ready yet, waiting... ($i/60)"
            sleep 1
          done
      
          if [ "$MYSQL_READY" = false ]; then
            echo "MySQL did not become ready within its container!"
            echo "Dumping test-mysql container logs (startup issue):"
            docker logs test-mysql
            echo "End of test-mysql container logs."
            exit 1
          fi
      
          # Give MySQL a little more buffer time after initial ping success
          echo "Giving MySQL an additional 5 seconds to fully initialize connections."
          sleep 5
      
          # Check network connectivity from where facedec-app will run (the host)
          echo "Testing connectivity to MySQL from the host..."
          # Use netcat (nc) to check if the port is open and listening
          # Install netcat if not already present on the runner
          sudo apt-get update && sudo apt-get install -y netcat || true
          for i in $(seq 1 10); do
            if nc -zv localhost 3306; then # Using localhost as MySQL's port is published to host
              echo "Host can connect to MySQL on port 3306."
              break
            else
              echo "Host cannot connect to MySQL on port 3306, retrying... ($i/10)"
              sleep 2
            fi
            if [ "$i" -eq 10 ]; then
              echo "Host failed to connect to MySQL after multiple attempts."
              echo "Dumping test-mysql container logs (connectivity issue):"
              docker logs test-mysql
              echo "End of test-mysql container logs."
              docker inspect test-mysql # Show network config
              exit 1
            fi
          done

      - name: Spring Boot App on Docker
        run: |
          docker run -d --name facedec-app --network app-network \
          -e SPRING_DATASOURCE_URL="jdbc:mysql://localhost:3306/attendance_db" \
          -e SPRING_DATASOURCE_USERNAME="user" \
          -e SPRING_DATASOURCE_PASSWORD="password" \
          -e JWT_SECRET="${{ vars.JWT_SECRET }}" \
          -e JWT_EXPIRATION_TIME="${{ vars.JWT_EXPIRATION_TIME }}" \
          -e REFRESH_EXPIRATION_TIME="${{ vars.REFRESH_EXPIRATION_TIME }}" \
          -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
          ashishv01/facedec:test-build
          
          echo "Waiting for Spring Boot application to start..."

      - name: Finding the Container
        run: docker ps -a | grep facedec-app && docker logs facedec-app || echo "No facedec-app container found."

      - name: Print final facedec-app logs
        if: always()
        run: docker logs -f facedec-app || echo "No logs found (container may not have started)."

      - name: Installing Curl
        run: |         
          # Install curl if not already present (should be on ubuntu-latest, but good safeguard)
          sudo apt-get update && sudo apt-get install -y curl
          
      - name: Run Basic Integration Tests
        run: |
          echo "Performing basic operations on the running application..."
          APP_BASE_URL="http://localhost:${{ env.APP_PORT }}"
          curl -s $APP_BASE_URL/health | grep 'Application is running' || { echo "Health check failed!"; exit 1; }
          echo "Health check passed."
          echo "Attempting to create a new user..."

      - name: Clean up Docker containers
        if: always()
        run: |
          echo "Cleaning up Docker containers and network..."
          docker stop test-mysql facedec-app || true
          docker rm test-mysql facedec-app || true
          docker network rm app-network || true

      - name: Push Docker Image to Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ashishv01/facedec:latest
            ashishv01/facedec:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
