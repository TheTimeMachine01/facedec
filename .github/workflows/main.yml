name: Docker Build, Test, and Conditional Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Select Platform for deployment (optional)'
        type: choice
        required: true
        default: 'none'
        options:
          - 'none'
          - 'railway'
          - 'render'

env:
  DOCKER_IMAGE_REPO: ${{ secrets.DOCKER_IMAGE_NAME }}
  JAVA_VERSION: '21'
  APP_PORT: 8080

jobs:
  build-test-and-push-docker:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Spring Boot JAR with Maven (Skipping Unit Tests)
        run: mvn -B package -DskipTests --file pom.xml

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

# --- START NEW DEBUGGING STEP ---
      - name: Print DOCKER_IMAGE_REPO value
        run: echo "The DOCKER_IMAGE_REPO is ${{ secrets.DOCKER_IMAGE_NAME }}"
# Expected output in logs: "The DOCKER_IMAGE_REPO is: ***"
# GitHub automatically masks secrets.
# --- END NEW DEBUGGING STEP ---

      - name: Build Docker Image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          load: true
          push: false
          tags: ashishv01/facedec:test-build
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Docker network
        run: docker network create app-network || true

      - name: Run Docker Compose Environment for Testing
        run: |
          docker run -d --name test-mysql --network app-network \
          -e MYSQL_DATABASE=attendance_db \
          -e MYSQL_USER=user \
          -e MYSQL_PASSWORD=password \
          -e MYSQL_ROOT_PASSWORD=rootpassword \
          -p 3306:3306 \
          mysql:8.0
          
          # Wait for MySQL to be ready
          echo "Waiting for MySQL to be ready..."
          for i in $(seq 1 60); do
            # Use mysqladmin to check if the server is up
            docker exec test-mysql mysqladmin ping -h localhost --silent && break
            echo "MySQL not ready yet, waiting... ($i/60)"
            sleep 1
          done
          docker exec test-mysql mysqladmin ping -h localhost --silent || { echo "MySQL did not start!"; exit 1; }
          echo "MySQL is ready."
          
          docker run -d --name facedec-app --network app-network \
          -e SPRING_DATASOURCE_URL="jdbc:mysql://test-mysql:3306/attendance_db" \
          -e SPRING_DATASOURCE_USERNAME="user" \
          -e SPRING_DATASOURCE_PASSWORD="password" \
          -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
          ashishv01/facedec:test-build
          
        
          echo "Waiting for Spring Boot application to start..."
          # Install curl if not already present (should be on ubuntu-latest, but good safeguard)
          sudo apt-get update && sudo apt-get install -y curl
          
           # Loop for health check
          APP_HEALTH_CHECK_URL="http://localhost:${{ env.APP_PORT }}/health"
          APP_STARTUP_TIMEOUT=120 # seconds
          
          for i in $(seq 1 ${APP_STARTUP_TIMEOUT}); do
            # Use 'curl -s -o /dev/null -w "%{http_code}"' to get only the HTTP status code
            # and avoid printing the response body to the log unless there's an issue.
            # Using --retry 0 to not retry on initial connection failure.
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 2 --max-time 5 ${APP_HEALTH_CHECK_URL})
            if [ "$HTTP_CODE" -eq 200 ]; then
              echo "Spring Boot application is ready (HTTP 200)!"
              break
            else
              echo "App not ready yet (HTTP Code: ${HTTP_CODE}), waiting... ($i/${APP_STARTUP_TIMEOUT})"
              # Fetch logs immediately if it fails to connect for better debug info
              if [ "$HTTP_CODE" -ne 0 ]; then # Only dump logs if curl actually connected (even if it got non-200)
                 # Dump logs from the application container to see what went wrong
                 echo "Dumping facedec-app container logs:"
                 docker logs facedec-app
                 echo "End of facedec-app container logs."
              fi
              sleep 5 # Wait longer between checks to give app more time to start
            fi
            if [ "$i" -eq ${APP_STARTUP_TIMEOUT} ]; then
              echo "Spring Boot app did not start within ${APP_STARTUP_TIMEOUT} seconds!"
              echo "Final facedec-app container logs:"
              docker logs facedec-app # Dump logs one last time
              exit 1
            fi
          done
          echo "Spring Boot application is ready."
          
      - name: Run Basic Integration Tests
        run: |
          echo "Performing basic operations on the running application..."
          APP_BASE_URL="http://localhost:${{ env.APP_PORT }}"
          curl -s $APP_BASE_URL/health | grep '"status":"UP"' || { echo "Health check failed!"; exit 1; }
          echo "Health check passed."
          echo "Attempting to create a new user..."
          curl -s -X POST $APP_BASE_URL/users \
            -H "Content-Type: application/json" \
            -d '{"username": "testuser_ghactions", "password": "testpassword123"}' | \
            grep "id" || { echo "User creation failed! Check API endpoint and payload."; exit 1; }
          echo "User 'testuser_ghactions' created successfully."
          echo "Attempting to log in as testuser_ghactions..."
          AUTH_RESPONSE=$(curl -s -X POST $APP_BASE_URL/login \
            -H "Content-Type: application/json" \
            -d '{"username": "testuser_ghactions", "password": "testpassword123"}')
          echo "$AUTH_RESPONSE" | grep "token" || { echo "Login failed! Check API endpoint and payload."; exit 1; }
          echo "Login for 'testuser_ghactions' successful."
          echo "All basic integration tests passed!"

      - name: Clean up Docker containers
        if: always()
        run: |
          echo "Cleaning up Docker containers and network..."
          docker stop test-mysql facedec-app || true
          docker rm test-mysql facedec-app || true
          docker network rm app-network || true

      - name: Push Docker Image to Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ashishv01/facedec:latest
            ashishv01/facedec:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
