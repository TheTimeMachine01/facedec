name: Docker Build, Test, and Conditional Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Select Platform for deployment (optional)'
        type: choice
        required: true
        default: 'none'
        options:
          - 'none'
          - 'railway'
          - 'render'

env:
  DOCKER_IMAGE_REPO: ${{ secrets.DOCKER_IMAGE_NAME }}
  JAVA_VERSION: '21'
  APP_PORT: 8080

jobs:
  build-test-and-push-docker:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Workflow name knowing
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Deploy Target:  ${{ github.event.inputs.deploy_target }}"
              

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Spring Boot JAR with Maven (Skipping Unit Tests)
        run: mvn -B package -DskipTests --file pom.xml

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

# --- START NEW DEBUGGING STEP ---
      - name: Print DOCKER_IMAGE_REPO value
        run: echo "The DOCKER_IMAGE_REPO is ${{ secrets.DOCKER_IMAGE_NAME }}"
# Expected output in logs: "The DOCKER_IMAGE_REPO is: ***"
# GitHub automatically masks secrets.
# --- END NEW DEBUGGING STEP ---

      - name: Build Docker Image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          load: true
          push: false
          tags: ashishv01/facedec:test-build
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Docker network
        run: docker network create app-network || true

      - name: MySQL on Docker
        run: |
          docker run -d --name test-mysql --network app-network \
            -e MYSQL_DATABASE=attendance_db \
            -e MYSQL_USER=user \
            -e MYSQL_PASSWORD=password \
            -e MYSQL_ROOT_PASSWORD=rootpassword \
            -p 3306:3306 \
            mysql:8.0
          
          echo "Waiting for MySQL to be ready..."

      - name: Loop until mysqladmin ping succeeds
        if: always()
        run: |
          # Loop until mysqladmin ping succeeds
          for i in $(seq 1 60); do
            docker exec test-mysql mysqladmin ping -hlocalhost --silent && break
            echo "MySQL not ready yet. Waiting ${i}s..."
            sleep 1
          done
          # If the loop finished without breaking, MySQL didn't become ready
          docker exec test-mysql mysqladmin ping -hlocalhost --silent || { echo "MySQL did not become ready in time. Exiting."; exit 1; }
          echo "MySQL is ready. Displaying logs..."
          # Now that MySQL is ready, dump all logs up to this point and exit
          docker logs test-mysql

      - name: Spring Boot App on Docker
        run: |
          docker run -d --name facedec-app --network app-network \
            -e SPRING_DATASOURCE_URL="jdbc:mysql://test-mysql:3306/attendance_db" \
            -e SPRING_DATASOURCE_USERNAME="user" \
            -e SPRING_DATASOURCE_PASSWORD="password" \
            -e JWT_SECRET="${{ vars.JWT_SECRET }}" \
            -e JWT_EXPIRATION_TIME="${{ vars.JWT_EXPIRATION_TIME }}" \
            -e REFRESH_EXPIRATION_TIME="${{ vars.REFRESH_EXPIRATION_TIME }}" \
            -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
            ashishv01/facedec:test-build
          
          echo "Waiting for Spring Boot application to start..."

      - name: Finding the Container
        run: docker ps -a | grep facedec-app && docker logs facedec-app || echo "No facedec-app container found."

      - name: Print final facedec-app logs
        if: always()
        run: |
          timeout 120s sh -c 'docker logs -f facedec-app 2>&1 | grep -m 1 "Started FacedecApplication"' \
            || { echo "ERROR: Application startup log not found within 120 seconds or container issue."; exit 1; }

      - name: Installing Curl
        run: |
          # Install curl if not already present (should be on ubuntu-latest, but good safeguard)
          sudo apt-get update && sudo apt-get install -y curl
          
      - name: Run Basic Integration Tests
        run: |
          echo "Performing basic operations on the running application..."
          APP_BASE_URL="http://localhost:${{ env.APP_PORT }}"
          curl -s $APP_BASE_URL/health | grep 'Application is running' || { echo "Health check failed!"; exit 1; }
          echo "Health check passed."
          echo "Attempting to create a new user..."

      - name: Clean up Docker containers
        if: always()
        run: |
          echo "Cleaning up Docker containers and network..."
          docker stop test-mysql facedec-app || true
          docker rm test-mysql facedec-app || true
          docker network rm app-network || true

      - name: Push Docker Image to Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ashishv01/facedec:latest
            ashishv01/facedec:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-test-and-push-docker
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target != 'none'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set Deploy Target Variable
        run: echo "DEPLOY_TARGET=${{ github.event.inputs.deploy_target }}" >> $GITHUB_ENV

      - name: Deploy to Railway
        if: env.DEPLOY_TARGET == 'railway'
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          MYSQL_DATABASE_URL: ${{ secrets.RAILWAY_MYSQL_URL }} # Use a specific secret for Railway MySQL
        run: |
          echo "Deploying to Railway..."
          # 
          # Install Railway CLI
          npm install -g @railway/cli
          #
          # Login to Railway
          railway login --token $RAILWAY_TOKEN
          #
          # ============================= Instructions ================================================
          # Set the project and environment (replace with your actual project/environment IDs)
          # You might need to configure Railway to pick up the Docker image pushed in the previous job.
          # A common approach is to link your Railway service to your Docker Hub repository.
          # Alternatively, if Railway supports direct Dockerfile deployment, you'd trigger that here.
          # For a Docker-based service on Railway, typically you just need to update the service.
          # Assuming you have a Railway service linked to this GitHub repository or Docker Hub:
          # You might need to trigger a redeploy on Railway. This often happens automatically on new image pushes
          # if the service is configured for auto-deploy.
          # If manual trigger is needed, Railway CLI might have a command like:
          # railway deploy --service <YOUR_SERVICE_ID> --tag ashishv01/facedec:latest
          # Or set variables directly if that's how you manage connections
          #
          #
          railway var set SPRING_DATASOURCE_URL="${{ env.MYSQL_DATABASE_URL }}" --service <YOUR_SERVICE_ID>
          railway var set SPRING_DATASOURCE_USERNAME="${{ secrets.RAILWAY_MYSQL_USERNAME }}" --service <YOUR_SERVICE_ID>
          railway var set SPRING_DATASOURCE_PASSWORD="${{ secrets.RAILWAY_MYSQL_PASSWORD }}" --service <YOUR_SERVICE_ID>
          railway var set JWT_SECRET="${{ vars.JWT_SECRET }}" --service <YOUR_SERVICE_ID>
          railway var set JWT_EXPIRATION_TIME="${{ vars.JWT_EXPIRATION_TIME }}" --service <YOUR_SERVICE_ID>
          railway var set REFRESH_EXPIRATION_TIME="${{ vars.REFRESH_EXPIRATION_TIME }}" --service <YOUR_SERVICE_ID>
          
          echo "Railway deployment initiated. Check Railway dashboard for status."

      - name: Deploy to Render
        if: env.DEPLOY_TARGET == 'render'
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          MYSQL_DATABASE_URL: ${{ secrets.RENDER_MYSQL_URL }} # Use a specific secret for Render MySQL
        run: |
          echo "Deploying to Render..."
          #
          # Render deployments are often triggered via webhooks or Render CLI.
          # If you have a Render service configured to auto-deploy from Docker Hub, pushing the image
          # in the previous step might be enough.
          # To trigger a manual deploy for a service via Render API (if linked to Docker):
          # You'll need to know your Render service ID.
          
          # Install curl if not already present
          sudo apt-get update && sudo apt-get install -y curl
          
          # Trigger Render deploy webhook (replace with your service's deploy hook URL)
          # You would typically find this in your Render service settings.
          # This example assumes you have a Render service connected to your Docker Hub.
          # The deploy hook would then pull the latest image.
          # For setting environment variables, Render usually has its own UI or API.
          # If you need to set them via API, it would involve more complex API calls.
          # For now, let's assume variables are managed in Render's UI or are picked up from a .env file if supported.
          
          # Example of triggering a deploy using a webhook (replace with your actual deploy hook URL)
          # Render's API often requires specific headers and JSON payloads for setting env vars,
          # which is more complex than a simple curl. It's usually managed in their dashboard.
          # If you want to trigger a deploy, you might have a "Deploy Hook" URL in your Render service settings.
          # curl -X POST YOUR_RENDER_DEPLOY_HOOK_URL
          
          echo "Render deployment initiated. Check Render dashboard for status."
          echo "Remember to set MySQL connection details and other environment variables directly in Render's dashboard for your service."
          echo "SPRING_DATASOURCE_URL: ${{ env.MYSQL_DATABASE_URL }}"
          echo "SPRING_DATASOURCE_USERNAME: ${{ secrets.RENDER_MYSQL_USERNAME }}"
          echo "SPRING_DATASOURCE_PASSWORD: ${{ secrets.RENDER_MYSQL_PASSWORD }}"
          echo "JWT_SECRET: ${{ vars.JWT_SECRET }}"
          echo "JWT_EXPIRATION_TIME: ${{ vars.JWT_EXPIRATION_TIME }}"
          echo "REFRESH_EXPIRATION_TIME: ${{ vars.REFRESH_EXPIRATION_TIME }}"
