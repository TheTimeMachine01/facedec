name: Docker Build, Test, and Conditional Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Select Platform for deployment (optional)'
        type: choice
        required: true
        default: 'none'
        options:
          - 'none'
          - 'railway'
          - 'render'
#    New Inputs
    avien_db_url:
      description: 'jdbc:mysql://avien-mysql-ashish-6abe.l.aivencloud.com:26622/facedec?useSSL=true&requireSSL=true&sslMode=VERIFY_IDENTITY&trustCertificateKeyStoreUrl=classpath:truststore.jks&trustCertificateKeyStorePassword=${CERT_PASS}'
      type: string
      required: false

env:
  DOCKER_IMAGE_REPO: ${{ secrets.DOCKER_IMAGE_NAME }}
  JAVA_VERSION: '21'
  APP_PORT: 8080

jobs:
  build-test-and-push-docker:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Workflow name knowing
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Deploy Target:  ${{ github.event.inputs.deploy_target }}"
              

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build Spring Boot JAR with Maven (Skipping Unit Tests)
        run: mvn -B package -DskipTests --file pom.xml

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

# --- START NEW DEBUGGING STEP ---
      - name: Print DOCKER_IMAGE_REPO value
        run: echo "The DOCKER_IMAGE_REPO is ${{ secrets.DOCKER_IMAGE_NAME }}"
# Expected output in logs: "The DOCKER_IMAGE_REPO is: ***"
# GitHub automatically masks secrets.
# --- END NEW DEBUGGING STEP ---

      - name: Build Docker Image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          load: true
          push: false
          tags: ashishv01/facedec:test-build
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create Docker network
        run: docker network create app-network || true

      - name: MySQL on Docker
        run: |
          docker run -d --name test-mysql --network app-network \
            -e MYSQL_DATABASE=attendance_db \
            -e MYSQL_USER=user \
            -e MYSQL_PASSWORD=password \
            -e MYSQL_ROOT_PASSWORD=rootpassword \
            -p 3306:3306 \
            mysql:8.0
          
          echo "Waiting for MySQL to be ready..."

      - name: Loop until mysqladmin ping succeeds
        if: always()
        run: |
          # Loop until mysqladmin ping succeeds
          for i in $(seq 1 60); do
            docker exec test-mysql mysqladmin ping -hlocalhost --silent && break
            echo "MySQL not ready yet. Waiting ${i}s..."
            sleep 1
          done
          # If the loop finished without breaking, MySQL didn't become ready
          docker exec test-mysql mysqladmin ping -hlocalhost --silent || { echo "MySQL did not become ready in time. Exiting."; exit 1; }
          echo "MySQL is ready. Displaying logs..."
          # Now that MySQL is ready, dump all logs up to this point and exit
          docker logs test-mysql

      - name: Spring Boot App on Docker
        run: |
          docker run -d --name facedec-app --network app-network \
            -e SPRING_DATASOURCE_URL="jdbc:mysql://test-mysql:3306/attendance_db" \
            -e SPRING_DATASOURCE_USERNAME="user" \
            -e SPRING_DATASOURCE_PASSWORD="password" \
            -e JWT_SECRET="${{ vars.JWT_SECRET }}" \
            -e JWT_EXPIRATION_TIME="${{ vars.JWT_EXPIRATION_TIME }}" \
            -e REFRESH_EXPIRATION_TIME="${{ vars.REFRESH_EXPIRATION_TIME }}" \
            -p ${{ env.APP_PORT }}:${{ env.APP_PORT }} \
            ashishv01/facedec:test-build
          
          echo "Waiting for Spring Boot application to start..."

      - name: Finding the Container
        run: docker ps -a | grep facedec-app && docker logs facedec-app || echo "No facedec-app container found."

      - name: Print final facedec-app logs
        if: always()
        run: |
          echo "Waiting for Spring Boot application to start..."

          # --- Part 1: Wait for log message with explicit loop and timeout ---
          START_TIME=$(date +%s) # Get current timestamp in seconds
          TIMEOUT=120           # Timeout in seconds
          LOG_MESSAGE_FOUND=false

          while true; do
            # Check if timeout has been reached
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            if [ "$ELAPSED_TIME" -ge "$TIMEOUT" ]; then
              echo "ERROR: Application startup log not found within ${TIMEOUT} seconds."
              docker logs facedec-app --tail 20 || true # Print last 20 lines for debugging
              exit 1 # Fail the step
            fi
          
            # Check for the log message
            if docker logs facedec-app | grep -q "Started FacedecApplication"; then
              echo "Spring Boot application log message 'Started FacedecApplication' found."
              LOG_MESSAGE_FOUND=true
              break # Exit the loop
            fi
          
            echo "Waiting for log message... (Elapsed time: ${ELAPSED_TIME}s / Timeout: ${TIMEOUT}s)"
            sleep 3 # Wait for 3 seconds before checking again
          done

          # Check if the log message was actually found
          if [ "$LOG_MESSAGE_FOUND" = "false" ]; then
            echo "ERROR: Application startup log was not found even after the loop." # Should not happen, but a double-check
            exit 1
          fi
            

      - name: Installing Curl
        run: |
          # Install curl if not already present (should be on ubuntu-latest, but good safeguard)
          sudo apt-get update && sudo apt-get install -y curl
          
      - name: Run Basic Integration Tests
        run: |
          echo "Performing basic operations on the running application..."
          APP_BASE_URL="http://localhost:${{ env.APP_PORT }}"
          curl -s $APP_BASE_URL/health | grep 'Application is running' || { echo "Health check failed!"; exit 1; }
          echo "Health check passed."
          echo "Attempting to create a new user..."

      - name: Clean up Docker containers
        if: always()
        run: |
          echo "Cleaning up Docker containers and network..."
          docker stop test-mysql facedec-app || true
          docker rm test-mysql facedec-app || true
          docker network rm app-network || true

      - name: Push Docker Image to Registry
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ashishv01/facedec:latest
            ashishv01/facedec:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-test-and-push-docker
    runs-on: ubuntu-latest
    environment: production
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_target != 'none'

    # Add the Railway CLI container for consistency
    container: ghcr.io/railwayapp/cli:latest

    env:
      DEPLOY_TARGET: ${{ github.event.inputs.deploy_target }}
      # Railway specific variables
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_API_TOKEN }} # Ensure you created this secret
      RAILWAY_SERVICE_ID: "d8f2b40a-b9bf-49ae-84d4-2ad5fd3a379f" # <<< REPLACE THIS WITH YOUR ACTUAL SERVICE ID

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js and npm
        run: |
          apk update && apk add --no-cache nodejs npm

      - name: Deploy to Railway
        if: env.DEPLOY_TARGET == 'railway'
        env:
          # Avien Database URL comes from workflow_dispatch input
          # We'll construct the final URL here, replacing ${CERT_PASS}
          AVIEN_DATASOURCE_BASE_URL: ${{ github.event.inputs.avien_db_url }}
          # Avien Database credentials come from GitHub Secrets
          AVIEN_DATASOURCE_USERNAME: ${{ secrets.AVIEN_DB_USERNAME }}
          AVIEN_DATASOURCE_PASSWORD: ${{ secrets.AVIEN_DB_PASSWORD }}
          AVIEN_DATASOURCE_CERT_PASSWORD: ${{ secrets.AVIEN_DB_CERT_PASSWORD }} # New secret for cert password
        run: |
          echo "Deploying to Railway..."
          # 
          # Install Railway CLI
          set -x
          npm install -g @railway/cli
          #
          # Login to Railway
          railway login
          #
          # ============================= Important ================================================
          # Replace <YOUR_SERVICE_ID> with the actual service ID of your Spring Boot application on Railway.
          # You can find this in your Railway project dashboard, under the service settings.
          #
          # Construct the full URL, replacing the placeholder with the secret value
          FULL_AVIEN_DATASOURCE_URL=$(echo "${{ env.AVIEN_DATASOURCE_BASE_URL }}" | sed "s|\\${CERT_PASS}|${{ env.AVIEN_DATASOURCE_CERT_PASSWORD }}|g")
          
          
          railway var set SPRING_DATASOURCE_URL="$FULL_AVIEN_DATASOURCE_URL" --service="${{ env.RAILWAY_SERVICE_ID }}"
          railway var set SPRING_DATASOURCE_USERNAME="${{ env.AVIEN_DATASOURCE_USERNAME }}" --service="${{ env.RAILWAY_SERVICE_ID }}"
          railway var set SPRING_DATASOURCE_PASSWORD="${{ env.AVIEN_DATASOURCE_PASSWORD }}" --service="${{ env.RAILWAY_SERVICE_ID }}"
          railway var set JWT_SECRET="${{ vars.JWT_SECRET }}" --service="${{ env.RAILWAY_SERVICE_ID }}"
          railway var set JWT_EXPIRATION_TIME="${{ vars.JWT_EXPIRATION_TIME }}" --service="${{ env.RAILWAY_SERVICE_ID }}"
          railway var set REFRESH_EXPIRATION_TIME="${{ vars.REFRESH_EXPIRATION_TIME }}" --service="${{ env.RAILWAY_SERVICE_ID }}"
          
          # Important: Trigger a redeploy after setting variables
          # Railway's auto-deploy from Docker Hub often handles new image pushes.
          # However, setting *new* environment variables often requires a separate redeploy
          # for the service to pick them up.
          echo "Triggering a redeploy for service: ${{ env.RAILWAY_SERVICE_ID }}"
          railway redeploy -s ${{ env.RAILWAY_SERVICE_ID }} # Use the service ID directly
          
          echo "Railway deployment and variable update initiated. Check Railway dashboard for status."


      - name: Deploy to Render
        if: env.DEPLOY_TARGET == 'render'
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          MYSQL_DATABASE_URL: ${{ secrets.RENDER_MYSQL_URL }} # Use a specific secret for Render MySQL
        run: |
          echo "Deploying to Render..."
          #
          # Render deployments are often triggered via webhooks or Render CLI.
          # If you have a Render service configured to auto-deploy from Docker Hub, pushing the image
          # in the previous step might be enough.
          # To trigger a manual deploy for a service via Render API (if linked to Docker):
          # You'll need to know your Render service ID.
          
          # Install curl if not already present
          sudo apt-get update && sudo apt-get install -y curl
          
          # Trigger Render deploy webhook (replace with your service's deploy hook URL)
          # You would typically find this in your Render service settings.
          # This example assumes you have a Render service connected to your Docker Hub.
          # The deploy hook would then pull the latest image.
          # For setting environment variables, Render usually has its own UI or API.
          # If you need to set them via API, it would involve more complex API calls.
          # For now, let's assume variables are managed in Render's UI or are picked up from a .env file if supported.
          
          # Example of triggering a deploy using a webhook (replace with your actual deploy hook URL)
          # Render's API often requires specific headers and JSON payloads for setting env vars,
          # which is more complex than a simple curl. It's usually managed in their dashboard.
          # If you want to trigger a deploy, you might have a "Deploy Hook" URL in your Render service settings.
          # curl -X POST YOUR_RENDER_DEPLOY_HOOK_URL
          
          echo "Render deployment initiated. Check Render dashboard for status."
          echo "Remember to set MySQL connection details and other environment variables directly in Render's dashboard for your service."
          echo "SPRING_DATASOURCE_URL: ${{ env.MYSQL_DATABASE_URL }}"
          echo "SPRING_DATASOURCE_USERNAME: ${{ secrets.RENDER_MYSQL_USERNAME }}"
          echo "SPRING_DATASOURCE_PASSWORD: ${{ secrets.RENDER_MYSQL_PASSWORD }}"
          echo "JWT_SECRET: ${{ vars.JWT_SECRET }}"
          echo "JWT_EXPIRATION_TIME: ${{ vars.JWT_EXPIRATION_TIME }}"
          echo "REFRESH_EXPIRATION_TIME: ${{ vars.REFRESH_EXPIRATION_TIME }}"
